version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.4
    container_name: care-demo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: care_demo
      POSTGRES_USER: care_user
      POSTGRES_PASSWORD: care_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - care-demo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U care_user -d care_demo"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: care-demo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - care-demo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: care-demo-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://care_user:care_password@postgres:5432/care_demo
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: care_user
      DB_PASSWORD: care_password
      DB_DATABASE: care_demo
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 7d
      PORT: 3001
      FRONTEND_URL: http://localhost:3000
      REDIS_URL: redis://redis:6379
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - care-demo-network
    command: npm run start:dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: care-demo-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - care-demo-network
    command: npm run dev

volumes:
  postgres_data:
  redis_data:

networks:
  care-demo-network:
    driver: bridge
